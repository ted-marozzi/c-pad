#!/bin/bash
# This is sake
# sake is a simple build system for C projects
# sake is like make but with scripts
# sake is like make but simpler
# sake is like make but a single file

# For information on how to use sake just read the code
# Get started with sake by running `sake create`
# Then run `sake`

set -exo pipefail

function create() {
  mkdir -p sake-scripts src

  cat >./sake-scripts/clean.sh <<'EOM'
#!/bin/bash
# Autogenerated by sake don't edit this file directly
set -exo pipefail

rm -rf ./bin ./main.dSYM
EOM

  cat >./sake-scripts/build.sh <<'EOM'
#!/bin/bash
# Autogenerated by sake don't edit this file directly
set -exo pipefail

flags=""

for arg in "$@"; do
  case "$arg" in
  "--debug" | "-d")
    flags+="-gdwarf-4"
    ;;

  "--sanatize" | "-s")
    flags+="-fsanitize=address "
    ;;

  *)
    echo "invalid argument $arg"
    ;;
  esac
done

mkdir -p bin/obj

for file in ./src/*.c; do
  file_name="${file#\.\/src\/}"
  # shellcheck disable=SC2086
  clang $flags -c "$file" -o "./bin/obj/${file_name%.c}.o"
done

for file in ./src/*.h; do
  file_name="${file#\.\/src\/}"
  # shellcheck disable=SC2086
  clang $flags -c "$file" -o "./bin/obj/$file_name.gch"
done

# shellcheck disable=SC2086
clang $flags ./bin/obj/*.o ./bin/obj/*.h.gch -o ./bin/main
EOM

  cat >./sake-scripts/run.sh <<'EOM'
#!/bin/bash
# Autogenerated by sake don't edit this file directly
set -exo pipefail

./bin/main
EOM
}

case $1 in
"clean")
  ./sake-scripts/clean.sh "${@:2}"
  ;;
"build")
  ./sake-scripts/build.sh "${@:2}"
  ;;
"run")
  ./sake-scripts/run.sh "${@:2}"
  ;;
"create")
  create
  ;;
"")
  ./sake-scripts/build.sh
  ./sake-scripts/run.sh
  ;;
*)
  echo "Invalid subcommand '$1'"
  ;;
esac
